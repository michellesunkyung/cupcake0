{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from pyspark.sql import DataFrame, functions as F\n",
    "from pyspark.sql.window import Window\n",
    "from pyspark.sql.types import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "s3_path = \"s3a://devsisters-gb-gamelog-prod/gb-prod-gamelog_\"\n",
    "logquery = sqlContext.read.format(\"com.devsisters.breadcrumb.spark.io.logquery\")\n",
    "opt = logquery.option(\"pathPrefix\", s3_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load Login"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "start_date = '2017-11-28'\n",
    "end_date = '2018-06-12'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "login_df = opt.option(\"primaryKey\", \"/login\").load() \\\n",
    "    .where(\"`@timestamp` >= '{0}' and `@timestamp` < '{1}'\".format(start_date, end_date))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- @timestamp: string (nullable = true)\n",
      " |-- @version: long (nullable = true)\n",
      " |-- action: string (nullable = true)\n",
      " |-- country_code: string (nullable = true)\n",
      " |-- current_land: long (nullable = true)\n",
      " |-- current_trophy: long (nullable = true)\n",
      " |-- environment: string (nullable = true)\n",
      " |-- host: string (nullable = true)\n",
      " |-- ip: string (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- log_type: string (nullable = true)\n",
      " |-- message: string (nullable = true)\n",
      " |-- method: string (nullable = true)\n",
      " |-- mid: string (nullable = true)\n",
      " |-- player_level: long (nullable = true)\n",
      " |-- process_time: double (nullable = true)\n",
      " |-- remote_addr: string (nullable = true)\n",
      " |-- request: struct (nullable = true)\n",
      " |    |-- agency: string (nullable = true)\n",
      " |    |-- appsflyerDeviceId: string (nullable = true)\n",
      " |    |-- commonReq: struct (nullable = true)\n",
      " |    |    |-- clientVersion: string (nullable = true)\n",
      " |    |    |-- dataVersionInfo: struct (nullable = true)\n",
      " |    |    |    |-- comboName: string (nullable = true)\n",
      " |    |    |    |-- serverDxcHash: string (nullable = true)\n",
      " |    |    |-- marketType: string (nullable = true)\n",
      " |    |    |-- memberHash: string (nullable = true)\n",
      " |    |    |-- mid: string (nullable = true)\n",
      " |    |    |-- osType: string (nullable = true)\n",
      " |    |    |-- sessionKey: string (nullable = true)\n",
      " |    |    |-- time: long (nullable = true)\n",
      " |    |-- deviceAuthParams: struct (nullable = true)\n",
      " |    |    |-- deviceType: string (nullable = true)\n",
      " |    |    |-- secret: string (nullable = true)\n",
      " |    |    |-- uuid: string (nullable = true)\n",
      " |    |-- languageCode: string (nullable = true)\n",
      " |    |-- loadingLog: array (nullable = true)\n",
      " |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |-- dataIndexHash: string (nullable = true)\n",
      " |    |    |    |-- delayBeforeLoginMilliSec: long (nullable = true)\n",
      " |    |    |    |-- downloadDataIndexTimeMilliSec: long (nullable = true)\n",
      " |    |    |    |-- downloadFailedFileList: array (nullable = true)\n",
      " |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |-- fileHash: string (nullable = true)\n",
      " |    |    |    |    |    |-- retryCount: long (nullable = true)\n",
      " |    |    |    |-- downloadIndexTimeMilliSec: long (nullable = true)\n",
      " |    |    |    |-- downloadURL: string (nullable = true)\n",
      " |    |    |    |-- indexHash: string (nullable = true)\n",
      " |    |    |    |-- numOfDownloads: long (nullable = true)\n",
      " |    |    |    |-- sizeOfDownloads: long (nullable = true)\n",
      " |    |    |    |-- totalDownloadTimeMilliSec: long (nullable = true)\n",
      " |    |    |    |-- userDownloadTimeMilliSec: long (nullable = true)\n",
      " |    |    |    |-- verifyFailedFileList: array (nullable = true)\n",
      " |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |-- mediaSource: string (nullable = true)\n",
      " |    |-- pushToken: string (nullable = true)\n",
      " |    |-- timeZone: string (nullable = true)\n",
      " |-- request_type: string (nullable = true)\n",
      " |-- response: struct (nullable = true)\n",
      " |    |-- abuserWarning: boolean (nullable = true)\n",
      " |    |-- championsInfo: struct (nullable = true)\n",
      " |    |    |-- seasonId: long (nullable = true)\n",
      " |    |    |-- status: struct (nullable = true)\n",
      " |    |    |    |-- finished: struct (nullable = true)\n",
      " |    |    |    |    |-- arenas: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |-- nearLeaderboard: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |-- topLeaderboard: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |-- totalPercent: long (nullable = true)\n",
      " |    |    |    |    |-- totalRank: long (nullable = true)\n",
      " |    |    |    |    |-- totalScore: long (nullable = true)\n",
      " |    |    |    |    |-- totalUser: long (nullable = true)\n",
      " |    |    |    |-- playing: struct (nullable = true)\n",
      " |    |    |    |    |-- arenas: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |-- nearLeaderboard: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |-- topLeaderboard: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |-- totalPercent: long (nullable = true)\n",
      " |    |    |    |    |-- totalRank: long (nullable = true)\n",
      " |    |    |    |    |-- totalScore: long (nullable = true)\n",
      " |    |    |    |    |-- totalUser: long (nullable = true)\n",
      " |    |    |    |-- postSeason: string (nullable = true)\n",
      " |    |    |    |-- preSeason: string (nullable = true)\n",
      " |    |    |    |-- unqualified: string (nullable = true)\n",
      " |    |-- commonResp: struct (nullable = true)\n",
      " |    |    |-- localPushes: array (nullable = true)\n",
      " |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |-- key: string (nullable = true)\n",
      " |    |    |    |    |-- serverTime: long (nullable = true)\n",
      " |    |    |-- member: struct (nullable = true)\n",
      " |    |    |    |-- bsdiff: struct (nullable = true)\n",
      " |    |    |    |    |-- diff: string (nullable = true)\n",
      " |    |    |    |    |-- hash: string (nullable = true)\n",
      " |    |    |    |-- full: struct (nullable = true)\n",
      " |    |    |    |    |-- full: string (nullable = true)\n",
      " |    |    |    |    |-- hash: string (nullable = true)\n",
      " |    |    |-- rewards: array (nullable = true)\n",
      " |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |-- accFBFriendReward: struct (nullable = true)\n",
      " |    |    |    |    |    |-- friendsCount: long (nullable = true)\n",
      " |    |    |    |    |    |-- rewards: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- coin: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- crystal: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |-- bumpReward: struct (nullable = true)\n",
      " |    |    |    |    |    |-- accRewards: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- crystal: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |-- bumpCount: long (nullable = true)\n",
      " |    |    |    |    |    |-- mid: string (nullable = true)\n",
      " |    |    |    |    |    |-- nickname: string (nullable = true)\n",
      " |    |    |    |    |    |-- rewards: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- crystal: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |-- couponReward: struct (nullable = true)\n",
      " |    |    |    |    |    |-- message: string (nullable = true)\n",
      " |    |    |    |    |    |-- rewards: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- card: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- category: string (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- coinQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- convertedItemQty: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- none: string (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- convertedToCoinQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- coin: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- crystal: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- gachaPotTicket: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- gachaPotGradeKey: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- soulPotion: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |-- title: string (nullable = true)\n",
      " |    |    |    |    |-- donationReward: struct (nullable = true)\n",
      " |    |    |    |    |    |-- capacity: long (nullable = true)\n",
      " |    |    |    |    |    |-- nicknameCounts: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- count: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- nickname: string (nullable = true)\n",
      " |    |    |    |    |    |-- rewards: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- card: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- category: string (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- coinQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- convertedItemQty: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- none: string (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- convertedToCoinQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |-- levelUpReward: struct (nullable = true)\n",
      " |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |-- rewards: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- coin: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |-- trophyResetReward: struct (nullable = true)\n",
      " |    |    |    |    |    |-- legendTrophyGain: long (nullable = true)\n",
      " |    |    |    |    |    |-- legendTrophyTotal: long (nullable = true)\n",
      " |    |    |    |    |    |-- trophy: long (nullable = true)\n",
      " |    |    |-- serverTime: long (nullable = true)\n",
      " |    |-- csToken: string (nullable = true)\n",
      " |    |-- enrollTimestamp: long (nullable = true)\n",
      " |    |-- error: struct (nullable = true)\n",
      " |    |    |-- noError: string (nullable = true)\n",
      " |    |-- friendInfo: struct (nullable = true)\n",
      " |    |    |-- bumpCount: long (nullable = true)\n",
      " |    |    |-- donationReqCnt: long (nullable = true)\n",
      " |    |    |-- duelChest: struct (nullable = true)\n",
      " |    |    |    |-- availableFromTs: long (nullable = true)\n",
      " |    |    |    |-- stars: long (nullable = true)\n",
      " |    |    |    |-- unavailable: string (nullable = true)\n",
      " |    |    |-- friendRemainCnt: long (nullable = true)\n",
      " |    |    |-- friendsRank: array (nullable = true)\n",
      " |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |-- friendsReq: array (nullable = true)\n",
      " |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |-- accExp: long (nullable = true)\n",
      " |    |    |    |    |-- currentLand: long (nullable = true)\n",
      " |    |    |    |    |-- donationScore: long (nullable = true)\n",
      " |    |    |    |    |-- hashtag: long (nullable = true)\n",
      " |    |    |    |    |-- isOnline: boolean (nullable = true)\n",
      " |    |    |    |    |-- lastPlay: struct (nullable = true)\n",
      " |    |    |    |    |    |-- coin: long (nullable = true)\n",
      " |    |    |    |    |    |-- cookie: struct (nullable = true)\n",
      " |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |-- cookie2: struct (nullable = true)\n",
      " |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |-- onPlay: boolean (nullable = true)\n",
      " |    |    |    |    |    |-- pet: struct (nullable = true)\n",
      " |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |-- score: long (nullable = true)\n",
      " |    |    |    |    |    |-- time: long (nullable = true)\n",
      " |    |    |    |    |    |-- treasures: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |-- lastRequestTime: long (nullable = true)\n",
      " |    |    |    |    |-- legendTrophy: long (nullable = true)\n",
      " |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |-- mid: string (nullable = true)\n",
      " |    |    |    |    |-- nickname: string (nullable = true)\n",
      " |    |    |    |    |-- trophy: long (nullable = true)\n",
      " |    |    |-- maxFBFriendCnt: long (nullable = true)\n",
      " |    |    |-- myReqFull: boolean (nullable = true)\n",
      " |    |-- friendIslandChapterState: array (nullable = true)\n",
      " |    |    |-- element: string (containsNull = true)\n",
      " |    |-- googleEmail: string (nullable = true)\n",
      " |    |-- landLeaderboard: struct (nullable = true)\n",
      " |    |    |-- endTime: long (nullable = true)\n",
      " |    |    |-- leaders: array (nullable = true)\n",
      " |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |-- myRank: long (nullable = true)\n",
      " |    |    |-- totalRankUser: long (nullable = true)\n",
      " |    |-- leagueInfo: struct (nullable = true)\n",
      " |    |    |-- effectSeasonId: long (nullable = true)\n",
      " |    |    |-- landId: long (nullable = true)\n",
      " |    |    |-- mapSeasonId: long (nullable = true)\n",
      " |    |    |-- status: struct (nullable = true)\n",
      " |    |    |    |-- finished: struct (nullable = true)\n",
      " |    |    |    |    |-- members: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |-- notOpen: string (nullable = true)\n",
      " |    |    |    |-- onProgress: struct (nullable = true)\n",
      " |    |    |    |    |-- endTime: long (nullable = true)\n",
      " |    |    |    |    |-- members: array (nullable = true)\n",
      " |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |-- willStart: struct (nullable = true)\n",
      " |    |    |    |    |-- estimatedMatchTime: long (nullable = true)\n",
      " |    |    |    |    |-- matchedMemberCount: long (nullable = true)\n",
      " |    |    |    |    |-- selfMember: struct (nullable = true)\n",
      " |    |    |    |    |    |-- bestPlay: struct (nullable = true)\n",
      " |    |    |    |    |    |    |-- coin: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- cookie: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- cookie2: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- onPlay: boolean (nullable = true)\n",
      " |    |    |    |    |    |    |-- pet: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- score: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- time: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- treasures: array (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |    |-- deltaRank: long (nullable = true)\n",
      " |    |    |    |    |    |-- member: struct (nullable = true)\n",
      " |    |    |    |    |    |    |-- accExp: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- currentLand: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- donationScore: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- hashtag: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- isOnline: boolean (nullable = true)\n",
      " |    |    |    |    |    |    |-- lastPlay: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- coin: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- cookie: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- cookie2: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- onPlay: boolean (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- pet: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- accQty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- evolutionBlessingGradeId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- evolutionLevel: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- skinId: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- stamina: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- lastRestoreTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |    |-- qty: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- score: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- time: long (nullable = true)\n",
      " |    |    |    |    |    |    |    |-- treasures: array (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- element: string (containsNull = true)\n",
      " |    |    |    |    |    |    |-- lastRequestTime: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- legendTrophy: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- level: long (nullable = true)\n",
      " |    |    |    |    |    |    |-- mid: string (nullable = true)\n",
      " |    |    |    |    |    |    |-- nickname: string (nullable = true)\n",
      " |    |    |    |    |    |    |-- trophy: long (nullable = true)\n",
      " |    |    |    |    |    |-- rank: long (nullable = true)\n",
      " |    |    |    |    |    |-- rewardItems: array (nullable = true)\n",
      " |    |    |    |    |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |    |    |    |    |-- chest: struct (nullable = true)\n",
      " |    |    |    |    |    |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |    |    |-- rewardTrophy: long (nullable = true)\n",
      " |    |    |-- tierId: long (nullable = true)\n",
      " |    |-- lobbyState: struct (nullable = true)\n",
      " |    |    |-- cookieStates: array (nullable = true)\n",
      " |    |    |    |-- element: string (containsNull = true)\n",
      " |    |-- notices: array (nullable = true)\n",
      " |    |    |-- element: struct (containsNull = true)\n",
      " |    |    |    |-- cautionKey: string (nullable = true)\n",
      " |    |    |    |-- contentKey: string (nullable = true)\n",
      " |    |    |    |-- externalUrl: string (nullable = true)\n",
      " |    |    |    |-- id: long (nullable = true)\n",
      " |    |    |    |-- popUp: boolean (nullable = true)\n",
      " |    |    |    |-- subtitleKey: string (nullable = true)\n",
      " |    |    |    |-- titleKey: string (nullable = true)\n",
      " |    |-- playerId: string (nullable = true)\n",
      " |    |-- secret: string (nullable = true)\n",
      " |    |-- sessionKey: string (nullable = true)\n",
      " |-- response_code: long (nullable = true)\n",
      " |-- response_type: string (nullable = true)\n",
      " |-- rid: string (nullable = true)\n",
      " |-- server_type: string (nullable = true)\n",
      " |-- uri: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "login_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "login_df.registerTempTable(\"login_df\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+--------+------+------------+------------+--------------+-----------+--------------------+--------------+-----+--------+-------+------+---------+------------+------------+------------------+--------------------+------------+--------------------+-------------+-------------+--------------------+-----------+------+\n",
      "|          @timestamp|@version|action|country_code|current_land|current_trophy|environment|                host|            ip|level|log_type|message|method|      mid|player_level|process_time|       remote_addr|             request|request_type|            response|response_code|response_type|                 rid|server_type|   uri|\n",
      "+--------------------+--------+------+------------+------------+--------------+-----------+--------------------+--------------+-----+--------+-------+------+---------+------------+------------+------------------+--------------------+------------+--------------------+-------------+-------------+--------------------+-----------+------+\n",
      "|2017-11-28T00:20:...|    null|/login|          KR|           7|          4293|       prod|ip-172-29-65-190....|203.226.207.32| info| gamelog|       |  POST|DSNGC0000|          23| 0.310672543|172.29.1.249:28522|[,1510434765091-7...|    LoginReq|[false,[23,[null,...|          200|    LoginResp|BvClcBgHpFOlOs5um7rO|game_server|/login|\n",
      "|2017-11-28T00:59:...|    null|/login|          KR|           7|          4288|       prod|ip-172-29-65-187....|203.226.207.32| info| gamelog|       |  POST|DSNGC0000|          23| 0.134493597|172.29.1.192:60325|[,1510434765091-7...|    LoginReq|[false,[23,[null,...|          200|    LoginResp|PcaesCkVaxvxwF3WgCgQ|game_server|/login|\n",
      "+--------------------+--------+------+------------+------------+--------------+-----------+--------------------+--------------+-----+--------+-------+------+---------+------------+------------+------------------+--------------------+------------+--------------------+-------------+-------------+--------------------+-----------+------+\n",
      "only showing top 2 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.table(\"login_df\").show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "login = spark.sql(\"\"\"\n",
    "        select\n",
    "            mid\n",
    "            , substr(`@timestamp`,1,10) as date\n",
    "            , `@timestamp` as date_time\n",
    "        from login_df\n",
    "\"\"\")      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "login.registerTempTable(\"login1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+----------+--------------------+\n",
      "|      mid|      date|           date_time|\n",
      "+---------+----------+--------------------+\n",
      "|DSNGC0000|2017-11-28|2017-11-28T00:20:...|\n",
      "|DSNGC0000|2017-11-28|2017-11-28T00:59:...|\n",
      "+---------+----------+--------------------+\n",
      "only showing top 2 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.table(\"login1\").show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#### login.unpersist()\n",
    "#### login.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load Billing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### 2차 시도: left join\n",
    "\n",
    "server_billing = opt.option(\"primaryKey\", \"/server/billing\").load().drop(\"@version\")\n",
    "    \n",
    "def _revise_server_billing(opt, server_billing):\n",
    "    revise_date = '2017-11-28'\n",
    "    revise_currency_code = 'KRW'\n",
    "\n",
    "    return server_billing \\\n",
    "        .withColumn('server__billing',\n",
    "                    F.struct(F.col(\"server__billing.price\").alias(\"price_origin\"),\n",
    "                             F.udf(lambda timestamp, currency_code, price_origin:\n",
    "                                   round(price_origin / 1.1) if revise_date <= timestamp and revise_currency_code == currency_code\n",
    "                                   else price_origin, DoubleType())\n",
    "                             ('@timestamp', 'server__billing.currency_code', 'server__billing.price').alias(\"price\"),\n",
    "                             *[F.col(\"server__billing.{}\".format(col)) for col in\n",
    "                               server_billing.select(\"server__billing.*\").drop(\"price\").columns]))\n",
    "    \n",
    "\n",
    "\n",
    "    \n",
    "billing_df = _revise_server_billing(opt, server_billing)\n",
    "billing_df.registerTempTable(\"billing_df\")\n",
    "\n",
    "\n",
    "class CRORollcakeInfo:\n",
    "    def __init__(self):\n",
    "        default_session = \"rollcake_db\"\n",
    "        mysql_user = \"spark\"\n",
    "        mysql_password = \"dhdudxorcjswo1!\"\n",
    "        self.database = \"rollcake_db\"\n",
    "        self.properties = {\"user\": mysql_user, \"password\": mysql_password}\n",
    "        self.driver = \"com.mysql.jdbc.Driver\"\n",
    "        self.host = \"gb-rollcake2.cb8trxt1zutn.us-west-2.rds.amazonaws.com\"\n",
    "        self.jdbc = \"jdbc:mysql://%s/%s?characterEncoding=UTF-8&rewriteBatchedStatements=true\" % (self.host, self.database)\n",
    "            \n",
    "mysql_info = CRORollcakeInfo()\n",
    "\n",
    "sqlContext.read \\\n",
    "    .option(\"driver\", mysql_info.driver) \\\n",
    "    .jdbc(mysql_info.jdbc, table='currency_rate', properties=mysql_info.properties) \\\n",
    "    .registerTempTable('currency_rate')\n",
    "\n",
    "package_meta = spark.read.parquet(\"s3a://devsisters-gb-data-analysis/balance/meta/package\") \\\n",
    "    .drop(\"product_id\")\n",
    "\n",
    "billing = spark.sql(\"\"\"\n",
    "    select\n",
    "        t1.mid\n",
    "        , t1.date \n",
    "        , t1.date_time\n",
    "        , t1.player_level\n",
    "        , t1.product_key\n",
    "        , t1.product_id\n",
    "        , round(t1.revenue * t2.rate) as revenue\n",
    "    from\n",
    "        (\n",
    "        select\n",
    "            mid\n",
    "            , substr(`@timestamp`,1,10) as date\n",
    "            , `@timestamp` as date_time\n",
    "\n",
    "            , server__billing.player_level as player_level\n",
    "            , case when server__billing is null then 0 else server__billing.product_key end as product_key\n",
    "            , case when server__billing is null then product_id else server__billing.product_id end as product_id\n",
    "            , case when server__billing is null then currency_code else server__billing.currency_code end as currency_code\n",
    "            , case when server__billing is null then price else server__billing.price end as revenue\n",
    "        from\n",
    "            billing_df\n",
    "        ) t1\n",
    "        left join currency_rate t2\n",
    "            on t1.currency_code = t2.currency_code and t1.date = t2.date\n",
    "\"\"\")\n",
    "\n",
    "\n",
    "\n",
    "billing = billing.join(package_meta, [\"product_key\"], \"left\")       \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "billing.registerTempTable(\"billing1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[product_key: bigint, mid: string, date: string, date_time: string, player_level: bigint, product_id: string, revenue: double, category1: string, category2: string, category3: string, pkg_name: string]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "billing.unpersist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[product_key: bigint, mid: string, date: string, date_time: string, player_level: bigint, product_id: string, revenue: double, category1: string, category2: string, category3: string, pkg_name: string]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "billing.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+---------+----------+--------------------+------------+--------------------+-------+---------+---------+---------+--------+\n",
      "|product_key|      mid|      date|           date_time|player_level|          product_id|revenue|category1|category2|category3|pkg_name|\n",
      "+-----------+---------+----------+--------------------+------------+--------------------+-------+---------+---------+---------+--------+\n",
      "|       null|BBKWQ2240|2016-10-29|2016-10-29T16:01:...|        null|gb.tier10.levelpa...|11323.0|     null|     null|     null|    null|\n",
      "|       null|RFLPN0961|2016-10-29|2016-10-29T17:22:...|        null|gb.tier10.levelpa...|11323.0|     null|     null|     null|    null|\n",
      "+-----------+---------+----------+--------------------+------------+--------------------+-------+---------+---------+---------+--------+\n",
      "only showing top 2 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.table(\"billing1\").show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### 아이스캔디맛은 따로\n",
    "\n",
    "spark.sql(\"\"\"\n",
    "    select product_key, pkg_name, date, min(date_time) as mindate\n",
    "    from billing1\n",
    "    where category2 = '쿠키패키지'\n",
    "    and product_key = 64\n",
    "    and date >= '2018-01-30'\n",
    "    group by product_key, pkg_name, date\n",
    "\"\"\").registerTempTable(\"icecandy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+-------------+----------+--------------------+\n",
      "|product_key|     pkg_name|      date|             mindate|\n",
      "+-----------+-------------+----------+--------------------+\n",
      "|         64|아이스캔디맛 쿠키 패키지|2018-02-11|2018-02-11T00:03:...|\n",
      "|         64|아이스캔디맛 쿠키 패키지|2018-02-22|2018-02-22T00:03:...|\n",
      "+-----------+-------------+----------+--------------------+\n",
      "only showing top 2 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.table(\"icecandy\").show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### 나머지 메타 패키지 (쿠키패키지)의 mindate 구하는 거\n",
    "spark.sql(\"\"\"\n",
    "    select product_key, pkg_name, min(date_time) as mindate\n",
    "    from billing1\n",
    "    where category2 = '쿠키패키지' and category3 != '레전드' and product_key >= 46\n",
    "    group by product_key, pkg_name\n",
    "\n",
    "\"\"\").registerTempTable(\"pkg_cookie\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+-------------+--------------------+\n",
      "|product_key|     pkg_name|             mindate|\n",
      "+-----------+-------------+--------------------+\n",
      "|         46|  마카롱맛 쿠키 패키지|2017-11-30T08:31:...|\n",
      "|         50| 음유시인맛 쿠키 패키지|2017-12-13T10:31:...|\n",
      "|         53| 스파클링맛 쿠키 패키지|2017-12-20T08:28:...|\n",
      "|         61|   단팥맛 쿠키 패키지|2018-01-12T10:24:...|\n",
      "|         64|아이스캔디맛 쿠키 패키지|2018-01-26T05:09:...|\n",
      "|         73|  핑크초코 쿠키 패키지|2018-02-13T10:12:...|\n",
      "|         76| 아보카도맛 쿠키 패키지|2018-02-27T10:08:...|\n",
      "|         79|   벚꽃맛 쿠키 패키지|2018-03-13T07:07:...|\n",
      "|         82| 휘핑크림맛 쿠키 패키지|2018-03-27T06:28:...|\n",
      "|         84| 화이트초코 쿠키 패키지|2018-04-10T09:15:...|\n",
      "|         88|  탐험가맛 쿠키 패키지|2018-04-28T14:12:...|\n",
      "|         94| 블랙베리맛 쿠키 패키지|2018-05-15T00:01:...|\n",
      "|        100|   칠리맛 쿠키 패키지|2018-05-29T00:10:...|\n",
      "|        101|  다크초코 쿠키 패키지|2018-06-04T23:44:...|\n",
      "|        109|  홍고추맛 쿠키 패키지|2018-06-12T00:02:...|\n",
      "+-----------+-------------+--------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "spark.table(\"pkg_cookie\").sort(\"mindate\").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cookie_min_df = spark.sql(\"\"\"\n",
    "    select\n",
    "        t.*\n",
    "        , substr(mindate,1,10) as start_date\n",
    "        , substr(time2,1,10) as end_date\n",
    "    from\n",
    "    (\n",
    "    select product_key, pkg_name, mindate\n",
    "    , from_unixtime(unix_timestamp(mindate, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")+86400, \"yyyy-MM-dd'T'HH:mm:ss.SSS\") as time2\n",
    "    from pkg_cookie\n",
    "    ) as t\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cookie_min_pd = cookie_min_df.sort(\"mindate\").toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "n = cookie_min_pd[\"product_key\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_key</th>\n",
       "      <th>pkg_name</th>\n",
       "      <th>mindate</th>\n",
       "      <th>time2</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>46</td>\n",
       "      <td>마카롱맛 쿠키 패키지</td>\n",
       "      <td>2017-11-30T08:31:05.562+09:00</td>\n",
       "      <td>2017-12-01T08:31:05.000</td>\n",
       "      <td>2017-11-30</td>\n",
       "      <td>2017-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>음유시인맛 쿠키 패키지</td>\n",
       "      <td>2017-12-13T10:31:14.435+09:00</td>\n",
       "      <td>2017-12-14T10:31:14.000</td>\n",
       "      <td>2017-12-13</td>\n",
       "      <td>2017-12-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>53</td>\n",
       "      <td>스파클링맛 쿠키 패키지</td>\n",
       "      <td>2017-12-20T08:28:55.412+09:00</td>\n",
       "      <td>2017-12-21T08:28:55.000</td>\n",
       "      <td>2017-12-20</td>\n",
       "      <td>2017-12-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>61</td>\n",
       "      <td>단팥맛 쿠키 패키지</td>\n",
       "      <td>2018-01-12T10:24:07.215+09:00</td>\n",
       "      <td>2018-01-13T10:24:07.000</td>\n",
       "      <td>2018-01-12</td>\n",
       "      <td>2018-01-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>64</td>\n",
       "      <td>아이스캔디맛 쿠키 패키지</td>\n",
       "      <td>2018-01-26T05:09:33.116+09:00</td>\n",
       "      <td>2018-01-27T05:09:33.000</td>\n",
       "      <td>2018-01-26</td>\n",
       "      <td>2018-01-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>73</td>\n",
       "      <td>핑크초코 쿠키 패키지</td>\n",
       "      <td>2018-02-13T10:12:31.555+09:00</td>\n",
       "      <td>2018-02-14T10:12:31.000</td>\n",
       "      <td>2018-02-13</td>\n",
       "      <td>2018-02-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>76</td>\n",
       "      <td>아보카도맛 쿠키 패키지</td>\n",
       "      <td>2018-02-27T10:08:24.181+09:00</td>\n",
       "      <td>2018-02-28T10:08:24.000</td>\n",
       "      <td>2018-02-27</td>\n",
       "      <td>2018-02-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>79</td>\n",
       "      <td>벚꽃맛 쿠키 패키지</td>\n",
       "      <td>2018-03-13T07:07:52.655+09:00</td>\n",
       "      <td>2018-03-14T07:07:52.000</td>\n",
       "      <td>2018-03-13</td>\n",
       "      <td>2018-03-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>82</td>\n",
       "      <td>휘핑크림맛 쿠키 패키지</td>\n",
       "      <td>2018-03-27T06:28:24.302+09:00</td>\n",
       "      <td>2018-03-28T06:28:24.000</td>\n",
       "      <td>2018-03-27</td>\n",
       "      <td>2018-03-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>84</td>\n",
       "      <td>화이트초코 쿠키 패키지</td>\n",
       "      <td>2018-04-10T09:15:55.864+09:00</td>\n",
       "      <td>2018-04-11T09:15:55.000</td>\n",
       "      <td>2018-04-10</td>\n",
       "      <td>2018-04-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>88</td>\n",
       "      <td>탐험가맛 쿠키 패키지</td>\n",
       "      <td>2018-04-28T14:12:21.835+09:00</td>\n",
       "      <td>2018-04-29T14:12:21.000</td>\n",
       "      <td>2018-04-28</td>\n",
       "      <td>2018-04-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>94</td>\n",
       "      <td>블랙베리맛 쿠키 패키지</td>\n",
       "      <td>2018-05-15T00:01:46.090+09:00</td>\n",
       "      <td>2018-05-16T00:01:46.000</td>\n",
       "      <td>2018-05-15</td>\n",
       "      <td>2018-05-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>100</td>\n",
       "      <td>칠리맛 쿠키 패키지</td>\n",
       "      <td>2018-05-29T00:10:11.198+09:00</td>\n",
       "      <td>2018-05-30T00:10:11.000</td>\n",
       "      <td>2018-05-29</td>\n",
       "      <td>2018-05-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>101</td>\n",
       "      <td>다크초코 쿠키 패키지</td>\n",
       "      <td>2018-06-04T23:44:42.562+09:00</td>\n",
       "      <td>2018-06-05T23:44:42.000</td>\n",
       "      <td>2018-06-04</td>\n",
       "      <td>2018-06-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>109</td>\n",
       "      <td>홍고추맛 쿠키 패키지</td>\n",
       "      <td>2018-06-12T00:02:28.677+09:00</td>\n",
       "      <td>2018-06-13T00:02:28.000</td>\n",
       "      <td>2018-06-12</td>\n",
       "      <td>2018-06-13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    product_key       pkg_name                        mindate  \\\n",
       "0            46    마카롱맛 쿠키 패키지  2017-11-30T08:31:05.562+09:00   \n",
       "1            50   음유시인맛 쿠키 패키지  2017-12-13T10:31:14.435+09:00   \n",
       "2            53   스파클링맛 쿠키 패키지  2017-12-20T08:28:55.412+09:00   \n",
       "3            61     단팥맛 쿠키 패키지  2018-01-12T10:24:07.215+09:00   \n",
       "4            64  아이스캔디맛 쿠키 패키지  2018-01-26T05:09:33.116+09:00   \n",
       "5            73    핑크초코 쿠키 패키지  2018-02-13T10:12:31.555+09:00   \n",
       "6            76   아보카도맛 쿠키 패키지  2018-02-27T10:08:24.181+09:00   \n",
       "7            79     벚꽃맛 쿠키 패키지  2018-03-13T07:07:52.655+09:00   \n",
       "8            82   휘핑크림맛 쿠키 패키지  2018-03-27T06:28:24.302+09:00   \n",
       "9            84   화이트초코 쿠키 패키지  2018-04-10T09:15:55.864+09:00   \n",
       "10           88    탐험가맛 쿠키 패키지  2018-04-28T14:12:21.835+09:00   \n",
       "11           94   블랙베리맛 쿠키 패키지  2018-05-15T00:01:46.090+09:00   \n",
       "12          100     칠리맛 쿠키 패키지  2018-05-29T00:10:11.198+09:00   \n",
       "13          101    다크초코 쿠키 패키지  2018-06-04T23:44:42.562+09:00   \n",
       "14          109    홍고추맛 쿠키 패키지  2018-06-12T00:02:28.677+09:00   \n",
       "\n",
       "                      time2  start_date    end_date  \n",
       "0   2017-12-01T08:31:05.000  2017-11-30  2017-12-01  \n",
       "1   2017-12-14T10:31:14.000  2017-12-13  2017-12-14  \n",
       "2   2017-12-21T08:28:55.000  2017-12-20  2017-12-21  \n",
       "3   2018-01-13T10:24:07.000  2018-01-12  2018-01-13  \n",
       "4   2018-01-27T05:09:33.000  2018-01-26  2018-01-27  \n",
       "5   2018-02-14T10:12:31.000  2018-02-13  2018-02-14  \n",
       "6   2018-02-28T10:08:24.000  2018-02-27  2018-02-28  \n",
       "7   2018-03-14T07:07:52.000  2018-03-13  2018-03-14  \n",
       "8   2018-03-28T06:28:24.000  2018-03-27  2018-03-28  \n",
       "9   2018-04-11T09:15:55.000  2018-04-10  2018-04-11  \n",
       "10  2018-04-29T14:12:21.000  2018-04-28  2018-04-29  \n",
       "11  2018-05-16T00:01:46.000  2018-05-15  2018-05-16  \n",
       "12  2018-05-30T00:10:11.000  2018-05-29  2018-05-30  \n",
       "13  2018-06-05T23:44:42.000  2018-06-04  2018-06-05  \n",
       "14  2018-06-13T00:02:28.000  2018-06-12  2018-06-13  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cookie_min_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#### 아래 코딩은 아아래에 루프가 맞는지 확인하는 용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "start_dt ='2017-11-30T08:31:05.562+09:00'\n",
    "end_dt = '2017-12-01T08:31:05.000'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----------+\n",
      "|    au|product_key|\n",
      "+------+-----------+\n",
      "|466339|         50|\n",
      "+------+-----------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "    login_df = opt.option(\"primaryKey\", \"/login\").load() \\\n",
    "        .where(\"`@timestamp` >= '{0}' and `@timestamp` < '{1}'\".format(start_dt, end_dt)) \\\n",
    "        .agg(F.countDistinct(\"mid\").alias(\"au\")) \\\n",
    "        .withColumn(\"product_key\", F.lit(\"{}\".format(product_key)))\n",
    "\n",
    "    login_df.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "for i in range(n):\n",
    "    print i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "###### 루프"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   product_key     pkg_name                        mindate  \\\n",
      "0           46  마카롱맛 쿠키 패키지  2017-11-30T08:31:05.562+09:00   \n",
      "\n",
      "                     time2  start_date    end_date  \n",
      "0  2017-12-01T08:31:05.000  2017-11-30  2017-12-01  \n",
      "   product_key      pkg_name                        mindate  \\\n",
      "1           50  음유시인맛 쿠키 패키지  2017-12-13T10:31:14.435+09:00   \n",
      "\n",
      "                     time2  start_date    end_date  \n",
      "1  2017-12-14T10:31:14.000  2017-12-13  2017-12-14  \n"
     ]
    }
   ],
   "source": [
    "for i in range(2):\n",
    "    pd_df = cookie_min_pd[i:i+1]\n",
    "    print pd_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_key</th>\n",
       "      <th>pkg_name</th>\n",
       "      <th>mindate</th>\n",
       "      <th>time2</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>음유시인맛 쿠키 패키지</td>\n",
       "      <td>2017-12-13T10:31:14.435+09:00</td>\n",
       "      <td>2017-12-14T10:31:14.000</td>\n",
       "      <td>2017-12-13</td>\n",
       "      <td>2017-12-14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   product_key      pkg_name                        mindate  \\\n",
       "1           50  음유시인맛 쿠키 패키지  2017-12-13T10:31:14.435+09:00   \n",
       "\n",
       "                     time2  start_date    end_date  \n",
       "1  2017-12-14T10:31:14.000  2017-12-13  2017-12-14  "
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "u'\\uc74c\\uc720\\uc2dc\\uc778\\ub9db \\ucfe0\\ud0a4 \\ud328\\ud0a4\\uc9c0'"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd_df[\"pkg_name\"].values[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "opt.option(\"primaryKey\", \"/login\").load() \\\n",
    "    .where(\"`@timestamp` >= '{0}' and `@timestamp` < '{1}'\".format(start_date, end_date)) \\\n",
    "    .agg(F.countDistinct(\"mid\").alias(\"au\")) \\\n",
    "    .withColumn(\"product_key\", F.lit(\"{}\".format(product_key)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-163-6f37fa24cf0a>, line 15)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-163-6f37fa24cf0a>\"\u001b[1;36m, line \u001b[1;32m15\u001b[0m\n\u001b[1;33m    login_df = opt.option(\"primaryKey\", \"/login\").load()         .groupby(\"F.floor(F.from_unixtime(F.unix_timestamp(\"`@timestamp`\", 'yyyy-MM-dd'T'HH:mm:ss.SSS'))                 -F.from_unixtime(F.unix_timestamp(\"start_dt\", 'yyyy-MM-dd'T'HH:mm:ss.SSS')))/24\")        .where(\"`@timestamp` >= '{0}' and `@timestamp` < '{1}'\".format(start_dt, end_dt))         .agg(F.countDistinct(\"mid\").alias(\"au\"))         .withColumn(\"product_key\", F.lit(\"{}\".format(product_key)))\u001b[0m\n\u001b[1;37m                                                                                                                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "df_list = list()\n",
    "\n",
    "for i in range(2):\n",
    "    pd_df = cookie_min_pd[i:i+1]\n",
    "    \n",
    "    start_dt = pd_df[\"mindate\"].values[0]\n",
    "    end_dt = pd_df[\"time2\"].values[0]\n",
    "    start_date = pd_df[\"start_date\"].values[0]\n",
    "    end_date = pd_df[\"end_date\"].values[0]\n",
    "    pkg_name = pd_df[\"pkg_name\"].values[0]\n",
    "    product_key = pd_df[\"product_key\"].values[0]\n",
    "    date = login_dif[\"date_time\"].values[0]\n",
    "\n",
    "    \n",
    "    login_df = opt.option(\"primaryKey\", \"/login\").load() \\\n",
    "        .groupby(\"F.floor(F.from_unixtime(F.unix_timestamp(\"`@timestamp`\", 'yyyy-MM-dd'T'HH:mm:ss.SSS'))\\\n",
    "                 -F.from_unixtime(F.unix_timestamp(\"start_dt\", 'yyyy-MM-dd'T'HH:mm:ss.SSS')))/24\")\\\n",
    "        .where(\"`@timestamp` >= '{0}' and `@timestamp` < '{1}'\".format(start_dt, end_dt)) \\\n",
    "        .agg(F.countDistinct(\"mid\").alias(\"au\")) \\\n",
    "        .withColumn(\"product_key\", F.lit(\"{}\".format(product_key)))\\\n",
    "\n",
    "        \n",
    "\n",
    "\n",
    "    login_df.show()\n",
    "    \n",
    "    df_list.append(login_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'withColumn'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-149-bd0257834aa2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mtest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwithColumn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"diff\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpd_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtime2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mpd_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mmindate\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m/home/ec2-user/anaconda2/lib/python2.7/site-packages/pandas/core/generic.pyc\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   2667\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2668\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2669\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2670\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2671\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'withColumn'"
     ]
    }
   ],
   "source": [
    "test = pd_df.withColumn(\"diff\", pd_df[time2].values[0] - pd_df[mindate].values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_all = reduce(DataFrame.union, df_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- au: long (nullable = false)\n",
      " |-- product_key: string (nullable = false)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_all.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----------+\n",
      "|    au|product_key|\n",
      "+------+-----------+\n",
      "|466339|         46|\n",
      "|547683|         50|\n",
      "+------+-----------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_all.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "meta1 = spark.table(\"pkg_cookie\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "meta2 = meta1.toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "meta2.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# mindate 합쳐서 시간대별 쿠키 revenue 구하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### getting the mindate for everything\n",
    "meta2.to_csv(\"mindate.csv\", index = False, encoding = \"UTF-8\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### for all cookies except the icecandy\n",
    "spark.sql(\"\"\"\n",
    "    select\n",
    "    t3.product_key\n",
    "    , t3.pkg_name\n",
    "    , t3.diff\n",
    "    , t3.date_time\n",
    "    , t3.orig\n",
    "    , t3.revenue\n",
    "    , t3.mindate\n",
    "    from\n",
    "    (\n",
    "    select \n",
    "        t1.product_key\n",
    "        , t1.pkg_name\n",
    "        , from_unixtime(unix_timestamp(t1.date_time, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")) as date_time\n",
    "        , t1.date_time as orig\n",
    "        , floor((((unix_timestamp(t1.date_time, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")))\n",
    "        -((unix_timestamp(t2.mindate, \"yyyy-MM-dd'T'HH:mm:ss.SSS\"))))/3600) as diff\n",
    "        , t1.revenue\n",
    "        , t2.mindate\n",
    "    from billing1 t1\n",
    "    inner join pkg_cookie t2\n",
    "    on t1.product_key = t2.product_key\n",
    "    ) t3\n",
    "    where t3.diff < 24\n",
    "\n",
    "\"\"\").registerTempTable(\"temp_Table\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### for icecandy\n",
    "spark.sql(\"\"\"\n",
    "    select\n",
    "    t3.product_key\n",
    "    , t3.pkg_name\n",
    "    , t3.diff\n",
    "    , t3.date_time\n",
    "    , t3.orig\n",
    "    , t3.revenue\n",
    "    , t3.mindate\n",
    "    from\n",
    "    (\n",
    "    select \n",
    "        t1.product_key\n",
    "        , t1.pkg_name\n",
    "        , from_unixtime(unix_timestamp(t1.date_time, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")) as date_time\n",
    "        , t1.date_time as orig\n",
    "        , floor((((unix_timestamp(t1.date_time, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")))\n",
    "        -((unix_timestamp(t2.mindate, \"yyyy-MM-dd'T'HH:mm:ss.SSS\"))))/3600) as diff\n",
    "        , t1.revenue\n",
    "        , t2.mindate\n",
    "    from billing1 t1\n",
    "    inner join icecandy t2\n",
    "    on t1.product_key = t2.product_key\n",
    "    ) t3\n",
    "    where t3.diff < 24\n",
    "\n",
    "\"\"\").registerTempTable(\"temp_Table2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "table12 = spark.table(\"temp_Table2\").groupby(\"product_key\", \"pkg_name\", \"diff\").agg(F.sum(\"revenue\").alias(\"revenue\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "table22 = table12.toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "table22.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "table22.to_csv(\"icecandy.csv\", index = False, encoding = \"UTF-8\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 로그인 데이터 합치기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: An unexpected error occurred while tokenizing input\n",
      "The following traceback may be corrupted or invalid\n",
      "The error message is: ('EOF in multi-line string', (1, 0))\n",
      "\n"
     ]
    },
    {
     "ename": "ParseException",
     "evalue": "u'\\nmismatched input \\'from\\' expecting {<EOF>, \\'WHERE\\', \\'GROUP\\', \\'ORDER\\', \\'HAVING\\', \\'LIMIT\\', \\'LATERAL\\', \\'WINDOW\\', \\'UNION\\', \\'EXCEPT\\', \\'MINUS\\', \\'INTERSECT\\', \\'SORT\\', \\'CLUSTER\\', \\'DISTRIBUTE\\'}(line 7, pos 4)\\n\\n== SQL ==\\n\\n    select\\n    t3.count(distict(mid))\\n    , t3.date\\n    , t3.diff\\n\\n    from\\n----^^^\\n    (\\n    select \\n        t1.mid\\n        , t1.date\\n        , from_unixtime(unix_timestamp(t1.date_time, \"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\")) as date_time\\n        , floor((((unix_timestamp(t1.date_time, \"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\")))\\n        -((unix_timestamp(t2.mindate, \"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\"))))/3600) as diff\\n        , t2.mindate\\n    from login1 t1\\n    outer join pkg_cookie t2\\n    on t1.date = t2.date\\n    ) t3\\n    where t3.diff < 24\\n    group by t3.date\\n'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mParseException\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-59-77f4c6ccd498>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     22\u001b[0m     \u001b[0mgroup\u001b[0m \u001b[0mby\u001b[0m \u001b[0mt3\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     23\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 24\u001b[1;33m \"\"\").registerTempTable(\"temp_Table2\")\n\u001b[0m",
      "\u001b[1;32m/home/ec2-user/spark/python/pyspark/sql/session.pyc\u001b[0m in \u001b[0;36msql\u001b[1;34m(self, sqlQuery)\u001b[0m\n\u001b[0;32m    601\u001b[0m         \u001b[1;33m[\u001b[0m\u001b[0mRow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf1\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf2\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34mu'row1'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mRow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf1\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf2\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34mu'row2'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mRow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf1\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf2\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34mu'row3'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    602\u001b[0m         \"\"\"\n\u001b[1;32m--> 603\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jsparkSession\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msql\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msqlQuery\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_wrapped\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    604\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    605\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0msince\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2.0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/home/ec2-user/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args)\u001b[0m\n\u001b[0;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1132\u001b[0m         return_value = get_return_value(\n\u001b[1;32m-> 1133\u001b[1;33m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[0;32m   1134\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1135\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/home/ec2-user/spark/python/pyspark/sql/utils.pyc\u001b[0m in \u001b[0;36mdeco\u001b[1;34m(*a, **kw)\u001b[0m\n\u001b[0;32m     71\u001b[0m                 \u001b[1;32mraise\u001b[0m \u001b[0mAnalysisException\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m': '\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     72\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'org.apache.spark.sql.catalyst.parser.ParseException: '\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 73\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mParseException\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m': '\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     74\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'org.apache.spark.sql.streaming.StreamingQueryException: '\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m                 \u001b[1;32mraise\u001b[0m \u001b[0mStreamingQueryException\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m': '\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mParseException\u001b[0m: u'\\nmismatched input \\'from\\' expecting {<EOF>, \\'WHERE\\', \\'GROUP\\', \\'ORDER\\', \\'HAVING\\', \\'LIMIT\\', \\'LATERAL\\', \\'WINDOW\\', \\'UNION\\', \\'EXCEPT\\', \\'MINUS\\', \\'INTERSECT\\', \\'SORT\\', \\'CLUSTER\\', \\'DISTRIBUTE\\'}(line 7, pos 4)\\n\\n== SQL ==\\n\\n    select\\n    t3.count(distict(mid))\\n    , t3.date\\n    , t3.diff\\n\\n    from\\n----^^^\\n    (\\n    select \\n        t1.mid\\n        , t1.date\\n        , from_unixtime(unix_timestamp(t1.date_time, \"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\")) as date_time\\n        , floor((((unix_timestamp(t1.date_time, \"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\")))\\n        -((unix_timestamp(t2.mindate, \"yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\"))))/3600) as diff\\n        , t2.mindate\\n    from login1 t1\\n    outer join pkg_cookie t2\\n    on t1.date = t2.date\\n    ) t3\\n    where t3.diff < 24\\n    group by t3.date\\n'"
     ]
    }
   ],
   "source": [
    "### for all cookies except the icecandy\n",
    "spark.sql(\"\"\"\n",
    "    select\n",
    "    t3.count(distict(mid))\n",
    "    , t3.date\n",
    "    , t3.diff\n",
    "\n",
    "    from\n",
    "    (\n",
    "    select \n",
    "        t1.mid\n",
    "        , t1.date\n",
    "        , from_unixtime(unix_timestamp(t1.date_time, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")) as date_time\n",
    "        , floor((((unix_timestamp(t1.date_time, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")))\n",
    "        -((unix_timestamp(t2.mindate, \"yyyy-MM-dd'T'HH:mm:ss.SSS\"))))/3600) as diff\n",
    "        , t2.mindate\n",
    "        \n",
    "    from login1 t1\n",
    "    outer join pkg_cookie t2\n",
    "    on t1.date = t2.date\n",
    "    ) t3\n",
    "    where t3.diff < 24\n",
    "    group by t3.date\n",
    "\n",
    "\"\"\").registerTempTable(\"temp_Table2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
